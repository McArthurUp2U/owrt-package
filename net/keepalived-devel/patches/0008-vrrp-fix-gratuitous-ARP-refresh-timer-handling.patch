From f0f7cbd14f51ebe0aada7d253811e776b868af5c Mon Sep 17 00:00:00 2001
From: Alexandre Cassen <acassen@gmail.com>
Date: Sat, 31 May 2014 21:18:02 +0200
Subject: [PATCH 8/8] vrrp: fix gratuitous ARP refresh timer handling

Previous code was using an 'int' to store parsed timer value. This value
was then expanded to TIMER_HZ which can lead to a wrapping issue if
requested timer is longer than local machine 'int' representation.

This patch reworked the code to use timeval_t instead and perfrom
regular timeval operations.
---
 keepalived/include/vrrp.h     |  2 +-
 keepalived/vrrp/vrrp.c        |  9 +++++----
 keepalived/vrrp/vrrp_data.c   |  6 +++---
 keepalived/vrrp/vrrp_parser.c |  2 +-
 lib/timer.c                   | 29 ++++++++++++++++++++++++++++-
 lib/timer.h                   |  2 ++
 6 files changed, 40 insertions(+), 10 deletions(-)

diff --git a/keepalived/include/vrrp.h b/keepalived/include/vrrp.h
index baa3a26..f102227 100644
--- a/keepalived/include/vrrp.h
+++ b/keepalived/include/vrrp.h
@@ -106,7 +106,7 @@ typedef struct _vrrp_t {
 							 * => eth0 for example.
 							 */
 	int			garp_delay;		/* Delay to launch gratuitous ARP */
-	int			garp_refresh;		/* Next scheduled gratuitous ARP refresh */
+	timeval_t		garp_refresh;		/* Next scheduled gratuitous ARP refresh */
 	timeval_t		garp_refresh_timer;	/* Next scheduled gratuitous ARP timer */
 	int			vrid;			/* virtual id. from 1(!) to 255 */
 	int			base_priority;		/* configured priority value */
diff --git a/keepalived/vrrp/vrrp.c b/keepalived/vrrp/vrrp.c
index 5509fe8..d426fed 100644
--- a/keepalived/vrrp/vrrp.c
+++ b/keepalived/vrrp/vrrp.c
@@ -769,8 +769,8 @@ vrrp_state_become_master(vrrp_t * vrrp)
 	vrrp_send_link_update(vrrp);
 
 	/* set refresh timer */
-	if (vrrp->garp_refresh) {
-		vrrp->garp_refresh_timer = timer_add_long(time_now, vrrp->garp_refresh);
+	if (!timer_isnull(vrrp->garp_refresh)) {
+		vrrp->garp_refresh_timer = timer_add_now(vrrp->garp_refresh);
 	}
 
 	/* Check if notify is needed */
@@ -921,9 +921,10 @@ vrrp_state_master_tx(vrrp_t * vrrp, const int prio)
 				    , vrrp->iname);
 		vrrp_state_become_master(vrrp);
 		ret = 1;
-	} else if (vrrp->garp_refresh && timer_cmp(time_now, vrrp->garp_refresh_timer) > 0) {
+	} else if (!timer_isnull(vrrp->garp_refresh) &&
+		   timer_cmp(time_now, vrrp->garp_refresh_timer) > 0) {
 		vrrp_send_link_update(vrrp);
-		vrrp->garp_refresh_timer = timer_add_long(time_now, vrrp->garp_refresh);
+		vrrp->garp_refresh_timer = timer_add_now(vrrp->garp_refresh);
 	}
 
 	vrrp_send_adv(vrrp,
diff --git a/keepalived/vrrp/vrrp_data.c b/keepalived/vrrp/vrrp_data.c
index 10be35f..0f70094 100644
--- a/keepalived/vrrp/vrrp_data.c
+++ b/keepalived/vrrp/vrrp_data.c
@@ -242,9 +242,9 @@ dump_vrrp(void *data)
 	if (vrrp->garp_delay)
 		log_message(LOG_INFO, "   Gratuitous ARP delay = %d",
 		       vrrp->garp_delay/TIMER_HZ);
-	if (vrrp->garp_refresh)
-		log_message(LOG_INFO, "   Gratuitous ARP refresh timer = %d",
-		       vrrp->garp_refresh/TIMER_HZ);
+	if (!timer_isnull(vrrp->garp_refresh))
+		log_message(LOG_INFO, "   Gratuitous ARP refresh timer = %lu",
+		       vrrp->garp_refresh.tv_sec);
 	log_message(LOG_INFO, "   Virtual Router ID = %d", vrrp->vrid);
 	log_message(LOG_INFO, "   Priority = %d", vrrp->base_priority);
 	log_message(LOG_INFO, "   Advert interval = %dsec",
diff --git a/keepalived/vrrp/vrrp_parser.c b/keepalived/vrrp/vrrp_parser.c
index 1e060b5..c3b6a41 100644
--- a/keepalived/vrrp/vrrp_parser.c
+++ b/keepalived/vrrp/vrrp_parser.c
@@ -363,7 +363,7 @@ static void
 vrrp_garp_refresh_handler(vector_t *strvec)
 {
 	vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);
-	vrrp->garp_refresh = atoi(vector_slot(strvec, 1)) * TIMER_HZ;
+	vrrp->garp_refresh.tv_sec = atoi(vector_slot(strvec, 1));
 }
 static void
 vrrp_auth_type_handler(vector_t *strvec)
diff --git a/lib/timer.c b/lib/timer.c
index fc38b21..da952a1 100644
--- a/lib/timer.c
+++ b/lib/timer.c
@@ -75,6 +75,23 @@ timer_sub(timeval_t a, timeval_t b)
 
 /* timer add */
 timeval_t
+timer_add(timeval_t a, timeval_t b)
+{
+	timeval_t ret;
+
+	timer_reset(ret);
+	ret.tv_usec = a.tv_usec + b.tv_usec;
+	ret.tv_sec = a.tv_sec + b.tv_sec;
+
+	if (ret.tv_usec >= TIMER_HZ) {
+		ret.tv_sec++;
+		ret.tv_usec -= TIMER_HZ;
+	}
+
+	return ret;
+}
+
+timeval_t
 timer_add_long(timeval_t a, long b)
 {
 	timeval_t ret;
@@ -209,6 +226,17 @@ timer_sub_now(timeval_t a)
 	return timer_sub(time_now, a);
 }
 
+/* timer add to current time */
+timeval_t
+timer_add_now(timeval_t a)
+{
+	/* Init current time if needed */
+	if (timer_isnull(time_now))
+		set_time_now();
+
+	return timer_add(time_now, a);
+}
+
 /* print timer value */
 void
 timer_dump(timeval_t a)
@@ -225,4 +253,3 @@ timer_tol(timeval_t a)
 	timer = a.tv_sec * TIMER_HZ + a.tv_usec;
 	return timer;
 }
-
diff --git a/lib/timer.h b/lib/timer.h
index 8b31491..0c02cbf 100644
--- a/lib/timer.h
+++ b/lib/timer.h
@@ -47,8 +47,10 @@ extern timeval_t set_time_now(void);
 extern timeval_t timer_dup(timeval_t);
 extern int timer_cmp(timeval_t, timeval_t);
 extern timeval_t timer_sub(timeval_t, timeval_t);
+extern timeval_t timer_add(timeval_t, timeval_t);
 extern timeval_t timer_add_long(timeval_t, long);
 extern timeval_t timer_sub_now(timeval_t);
+extern timeval_t timer_add_now(timeval_t);
 extern void timer_dump(timeval_t);
 extern unsigned long timer_tol(timeval_t);
 
-- 
1.8.3.2

