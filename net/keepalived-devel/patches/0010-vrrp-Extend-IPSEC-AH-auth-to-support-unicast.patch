From c1b686a86da69a7e6bbb5f68728ad69293fdc8e7 Mon Sep 17 00:00:00 2001
From: Alexandre Cassen <acassen@gmail.com>
Date: Mon, 23 Jun 2014 13:06:33 +0200
Subject: [PATCH 10/10] vrrp: Extend IPSEC-AH auth to support unicast

If you plane to use IPSEC-AH auth in unicast mode (which THE best idea), then
IP header TTL MUST be zeroed since it is mutable field on transit.
---
 keepalived/include/vrrp_ipsecah.h | 1 +
 keepalived/vrrp/vrrp.c            | 9 ++++++++-
 2 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/keepalived/include/vrrp_ipsecah.h b/keepalived/include/vrrp_ipsecah.h
index 4cb7baf..2064de2 100644
--- a/keepalived/include/vrrp_ipsecah.h
+++ b/keepalived/include/vrrp_ipsecah.h
@@ -50,6 +50,7 @@ typedef struct _ipsec_ah {				/* rfc2402.2 */
 
 typedef struct {		/* rfc2402.3.3.3.1.1.1 */
 	uint8_t			tos;
+	uint8_t			ttl;
 	uint16_t		frag_off;
 	uint16_t		check;
 } ICV_mutable_fields;		/* We need to zero this fields to compute the ICV */
diff --git a/keepalived/vrrp/vrrp.c b/keepalived/vrrp/vrrp.c
index ba36989..73a886e 100644
--- a/keepalived/vrrp/vrrp.c
+++ b/keepalived/vrrp/vrrp.c
@@ -170,6 +170,8 @@ vrrp_in_chk_ipsecah(vrrp_t * vrrp, char *buffer)
 	ip->tos = 0;
 	ip->frag_off = 0;
 	ip->check = 0;
+	if (!LIST_ISEMPTY(vrrp->unicast_peer))
+		ip->ttl = 0;
 	memcpy(backup_auth_data, ah->auth_data, sizeof (ah->auth_data));
 	memset(ah->auth_data, 0, sizeof (ah->auth_data));
 	memset(digest, 0, 16);
@@ -300,7 +302,7 @@ vrrp_in_chk(vrrp_t * vrrp, char *buffer)
 
 		/* check the authenicaion if it is ipsec ah */
 		if (hd->auth_type == VRRP_AUTH_AH)
-			return (vrrp_in_chk_ipsecah(vrrp, buffer));
+			return vrrp_in_chk_ipsecah(vrrp, buffer);
 
 		/* Set expected vrrp packet lenght */
 		vrrphdr_len = sizeof(vrrphdr_t) + VRRP_AUTH_LEN + hd->naddr * sizeof(uint32_t);
@@ -417,6 +419,7 @@ vrrp_build_ipsecah(vrrp_t * vrrp, char *buffer, int buflen)
 
 	/* backup the ip mutable fields */
 	ip_mutable_fields->tos = ip->tos;
+	ip_mutable_fields->ttl = ip->ttl;
 	ip_mutable_fields->frag_off = ip->frag_off;
 	ip_mutable_fields->check = ip->check;
 
@@ -424,6 +427,8 @@ vrrp_build_ipsecah(vrrp_t * vrrp, char *buffer, int buflen)
 	ip->tos = 0;
 	ip->frag_off = 0;
 	ip->check = 0;
+	if (!LIST_ISEMPTY(vrrp->unicast_peer))
+		ip->ttl = 0;
 
 	/* fill in the Payload len field */
 	ah->payload_len = IPSEC_AH_PLEN;
@@ -471,6 +476,8 @@ vrrp_build_ipsecah(vrrp_t * vrrp, char *buffer, int buflen)
 	ip->tos = ip_mutable_fields->tos;
 	ip->frag_off = ip_mutable_fields->frag_off;
 	ip->check = ip_mutable_fields->check;
+	if (!LIST_ISEMPTY(vrrp->unicast_peer))
+		ip->ttl = ip_mutable_fields->ttl;
 
 	FREE(ip_mutable_fields);
 	FREE(digest);
-- 
1.8.5.5

