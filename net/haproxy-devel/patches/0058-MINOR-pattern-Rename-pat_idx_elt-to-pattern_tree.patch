From e1bcac5b8ff9385e9b094d765d7dd943a75c181a Mon Sep 17 00:00:00 2001
From: Thierry FOURNIER <tfournier@exceliance.fr>
Date: Fri, 13 Dec 2013 16:09:50 +0100
Subject: [PATCH 058/103] MINOR: pattern: Rename "pat_idx_elt" to
 "pattern_tree"

This is just for having coherent struct names.
---
 include/proto/pattern.h |  4 ++--
 include/types/pattern.h |  2 +-
 src/dumpstats.c         |  6 +++---
 src/pattern.c           | 22 +++++++++++-----------
 4 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/include/proto/pattern.h b/include/proto/pattern.h
index 30a4f81..c49f53d 100644
--- a/include/proto/pattern.h
+++ b/include/proto/pattern.h
@@ -58,7 +58,7 @@ static inline int pat_find_match_name(const char *name)
  * associated to the matching patterned will be put there. The function returns
  * PAT_MATCH or PAT_NOMATCH.
  */
-enum pat_match_res pattern_exec_match(struct pattern_expr *expr, struct sample *smp, struct sample_storage **sample, struct pattern **pat, struct pat_idx_elt **elt);
+enum pat_match_res pattern_exec_match(struct pattern_expr *expr, struct sample *smp, struct sample_storage **sample, struct pattern **pat, struct pattern_tree **elt);
 
 /*
  *
@@ -160,7 +160,7 @@ int pattern_read_from_file(struct pattern_expr *expr, const char *filename, int
 void pattern_free(struct pattern_list *pat);
 void pattern_prune_expr(struct pattern_expr *expr);
 void pattern_init_expr(struct pattern_expr *expr);
-int pattern_lookup(const char *args, struct pattern_expr *expr, struct pattern_list **pat_elt, struct pat_idx_elt **idx_elt, char **err);
+int pattern_lookup(const char *args, struct pattern_expr *expr, struct pattern_list **pat_elt, struct pattern_tree **idx_elt, char **err);
 
 
 #endif
diff --git a/include/types/pattern.h b/include/types/pattern.h
index c59bebc..665925c 100644
--- a/include/types/pattern.h
+++ b/include/types/pattern.h
@@ -97,7 +97,7 @@ struct pat_time {
 /* This contain each tree indexed entry. This struct permit to associate
  * "sample" with a tree entry. It is used with maps.
  */
-struct pat_idx_elt {
+struct pattern_tree {
 	struct sample_storage *smp;
 	struct ebmb_node node;
 };
diff --git a/src/dumpstats.c b/src/dumpstats.c
index 0eb5639..31b59f4 100644
--- a/src/dumpstats.c
+++ b/src/dumpstats.c
@@ -1561,7 +1561,7 @@ static int stats_sock_parse_request(struct stream_interface *si, char *line)
 		}
 		else if (strcmp(args[1], "map") == 0) {
 			struct pattern_list *pat_elt;
-			struct pat_idx_elt *idx_elt;
+			struct pattern_tree *idx_elt;
 			char *value = NULL;
 
 			/* Expect three parameters: map name, key and new value. */
@@ -1849,7 +1849,7 @@ static int stats_sock_parse_request(struct stream_interface *si, char *line)
 	else if (strcmp(args[0], "del") == 0) {
 		if (strcmp(args[1], "map") == 0) {
 			struct pattern_list *pat_elt;
-			struct pat_idx_elt *idx_elt;
+			struct pattern_tree *idx_elt;
 			struct map_entry *ent;
 
 			/* Expect two parameters: map name and key. */
@@ -4826,7 +4826,7 @@ static int stats_map_lookup(struct stream_interface *si)
 	struct sample_storage *smp;
 	struct sample sample;
 	struct pattern *pat;
-	struct pat_idx_elt *elt;
+	struct pattern_tree *elt;
 	enum pat_match_res res;
 	struct sockaddr_in addr;
 	char addr_str[INET_ADDRSTRLEN];
diff --git a/src/pattern.c b/src/pattern.c
index 84b54fb..fa3b7c5 100644
--- a/src/pattern.c
+++ b/src/pattern.c
@@ -739,13 +739,13 @@ void free_pattern_list(struct list *head)
 void free_pattern_tree(struct eb_root *root)
 {
 	struct eb_node *node, *next;
-	struct pat_idx_elt *elt;
+	struct pattern_tree *elt;
 
 	node = eb_first(root);
 	while (node) {
 		next = eb_next(node);
 		eb_delete(node);
-		elt = container_of(node, struct pat_idx_elt, node);
+		elt = container_of(node, struct pattern_tree, node);
 		free(elt->smp);
 		free(elt);
 		node = next;
@@ -889,7 +889,7 @@ int pat_idx_list_reg(struct pattern_expr *expr, struct pattern *pat, char **err)
 int pat_idx_tree_ip(struct pattern_expr *expr, struct pattern *pat, char **err)
 {
 	unsigned int mask;
-	struct pat_idx_elt *node;
+	struct pattern_tree *node;
 
 	/* Only IPv4 can be indexed */
 	if (pat->type == SMP_T_IPV4) {
@@ -930,7 +930,7 @@ int pat_idx_tree_ip(struct pattern_expr *expr, struct pattern *pat, char **err)
 int pat_idx_tree_str(struct pattern_expr *expr, struct pattern *pat, char **err)
 {
 	int len;
-	struct pat_idx_elt *node;
+	struct pattern_tree *node;
 
 	/* Only string can be indexed */
 	if (pat->type != SMP_T_CSTR && pat->type != SMP_T_STR) {
@@ -1066,12 +1066,12 @@ int pattern_read_from_file(struct pattern_expr *expr,
  */
 enum pat_match_res pattern_exec_match(struct pattern_expr *expr, struct sample *smp,
                                       struct sample_storage **sample,
-                                      struct pattern **pat, struct pat_idx_elt **idx_elt)
+                                      struct pattern **pat, struct pattern_tree **idx_elt)
 {
 	enum pat_match_res pat_res = PAT_NOMATCH;
 	struct pattern_list *pattern;
 	struct ebmb_node *node = NULL;
-	struct pat_idx_elt *elt;
+	struct pattern_tree *elt;
 
 	if (expr->match == pat_match_nothing) {
 		if (smp->data.uint)
@@ -1096,7 +1096,7 @@ enum pat_match_res pattern_exec_match(struct pattern_expr *expr, struct sample *
 			}
 			if (node) {
 				pat_res |= PAT_MATCH;
-				elt = ebmb_entry(node, struct pat_idx_elt, node);
+				elt = ebmb_entry(node, struct pattern_tree, node);
 				if (sample)
 					*sample = elt->smp;
 				if (idx_elt)
@@ -1126,12 +1126,12 @@ enum pat_match_res pattern_exec_match(struct pattern_expr *expr, struct sample *
  * NULL. Pointers are not set if they're passed as NULL.
  */
 int pattern_lookup(const char *key, struct pattern_expr *expr,
-                   struct pattern_list **pat_elt, struct pat_idx_elt **idx_elt, char **err)
+                   struct pattern_list **pat_elt, struct pattern_tree **idx_elt, char **err)
 {
 	struct pattern pattern;
 	struct pattern_list *pat;
 	struct ebmb_node *node;
-	struct pat_idx_elt *elt;
+	struct pattern_tree *elt;
 	unsigned int mask = 0;
 
 	/* no real pattern */
@@ -1170,7 +1170,7 @@ int pattern_lookup(const char *key, struct pattern_expr *expr,
 			for (node = ebmb_first(&expr->pattern_tree);
 			     node;
 			     node = ebmb_next(node)) {
-				elt = container_of(node, struct pat_idx_elt, node);
+				elt = container_of(node, struct pattern_tree, node);
 				if (strcmp(pattern.ptr.str, (char *)elt->node.key) == 0)
 					goto found;
 			}
@@ -1179,7 +1179,7 @@ int pattern_lookup(const char *key, struct pattern_expr *expr,
 			for (node = ebmb_first(&expr->pattern_tree);
 			     node;
 			     node = ebmb_next(node)) {
-				elt = container_of(node, struct pat_idx_elt, node);
+				elt = container_of(node, struct pattern_tree, node);
 				if (elt->node.node.pfx == mask &&
 				    memcmp(&pattern.val.ipv4.addr.s_addr, elt->node.key, 4) == 0)
 					goto found;
-- 
1.8.3.2

