From 899d95757e74c57feaff9fe0dd62c3327d5681ba Mon Sep 17 00:00:00 2001
From: Willy Tarreau <w@1wt.eu>
Date: Sat, 25 Jan 2014 19:20:35 +0100
Subject: [PATCH 55/69] REORG: polling: rename the cache allocation functions

- alloc_spec_entry() becomes fd_alloc_cache_entry()
- release_spec_entry() becomes fd_release_cache_entry()
---
 include/proto/fd.h | 13 +++++++------
 src/ev_epoll.c     |  7 +++----
 src/ev_kqueue.c    |  7 +++----
 src/ev_poll.c      |  7 +++----
 src/ev_select.c    |  7 +++----
 src/fd.c           |  2 +-
 6 files changed, 20 insertions(+), 23 deletions(-)

diff --git a/include/proto/fd.h b/include/proto/fd.h
index ba08260..897c2d3 100644
--- a/include/proto/fd.h
+++ b/include/proto/fd.h
@@ -94,22 +94,23 @@ static inline void updt_fd(const int fd)
 }
 
 
-/* allocate an entry for a speculative event. This can be done at any time. */
-static inline void alloc_spec_entry(const int fd)
+/* Allocates a cache entry for a file descriptor if it does not yet have one.
+ * This can be done at any time.
+ */
+static inline void fd_alloc_cache_entry(const int fd)
 {
 	if (fdtab[fd].cache)
-		/* FD already in speculative I/O list */
 		return;
 	fd_cache_num++;
 	fdtab[fd].cache = fd_cache_num;
 	fd_cache[fd_cache_num-1] = fd;
 }
 
-/* Removes entry used by fd <fd> from the spec list and replaces it with the
- * last one. The fdtab.spec is adjusted to match the back reference if needed.
+/* Removes entry used by fd <fd> from the FD cache and replaces it with the
+ * last one. The fdtab.cache is adjusted to match the back reference if needed.
  * If the fd has no entry assigned, return immediately.
  */
-static inline void release_spec_entry(int fd)
+static inline void fd_release_cache_entry(int fd)
 {
 	unsigned int pos;
 
diff --git a/src/ev_epoll.c b/src/ev_epoll.c
index 45f7cea..a15cfc3 100644
--- a/src/ev_epoll.c
+++ b/src/ev_epoll.c
@@ -96,13 +96,12 @@ REGPRM2 static void _do_poll(struct poller *p, int exp)
 				/* This fd doesn't use any active entry anymore, we can
 				 * kill its entry.
 				 */
-				release_spec_entry(fd);
+				fd_release_cache_entry(fd);
 			}
 			else if ((en & ~eo) & FD_EV_ACTIVE_RW) {
-				/* we need a new spec entry now */
-				alloc_spec_entry(fd);
+				/* we need a new cache entry now */
+				fd_alloc_cache_entry(fd);
 			}
-
 		}
 		fdtab[fd].updated = 0;
 		fdtab[fd].new = 0;
diff --git a/src/ev_kqueue.c b/src/ev_kqueue.c
index 3aa3fd1..af5698b 100644
--- a/src/ev_kqueue.c
+++ b/src/ev_kqueue.c
@@ -85,13 +85,12 @@ REGPRM2 static void _do_poll(struct poller *p, int exp)
 				/* This fd doesn't use any active entry anymore, we can
 				 * kill its entry.
 				 */
-				release_spec_entry(fd);
+				fd_release_cache_entry(fd);
 			}
 			else if ((en & ~eo) & FD_EV_ACTIVE_RW) {
-				/* we need a new spec entry now */
-				alloc_spec_entry(fd);
+				/* we need a new cache entry now */
+				fd_alloc_cache_entry(fd);
 			}
-
 		}
 		fdtab[fd].updated = 0;
 		fdtab[fd].new = 0;
diff --git a/src/ev_poll.c b/src/ev_poll.c
index 6d550a6..eff9007 100644
--- a/src/ev_poll.c
+++ b/src/ev_poll.c
@@ -93,13 +93,12 @@ REGPRM2 static void _do_poll(struct poller *p, int exp)
 				/* This fd doesn't use any active entry anymore, we can
 				 * kill its entry.
 				 */
-				release_spec_entry(fd);
+				fd_release_cache_entry(fd);
 			}
 			else if ((en & ~eo) & FD_EV_ACTIVE_RW) {
-				/* we need a new spec entry now */
-				alloc_spec_entry(fd);
+				/* we need a new cache entry now */
+				fd_alloc_cache_entry(fd);
 			}
-
 		}
 		fdtab[fd].updated = 0;
 		fdtab[fd].new = 0;
diff --git a/src/ev_select.c b/src/ev_select.c
index f79cdbf..df1d161 100644
--- a/src/ev_select.c
+++ b/src/ev_select.c
@@ -76,13 +76,12 @@ REGPRM2 static void _do_poll(struct poller *p, int exp)
 				/* This fd doesn't use any active entry anymore, we can
 				 * kill its entry.
 				 */
-				release_spec_entry(fd);
+				fd_release_cache_entry(fd);
 			}
 			else if ((en & ~eo) & FD_EV_ACTIVE_RW) {
-				/* we need a new spec entry now */
-				alloc_spec_entry(fd);
+				/* we need a new cache entry now */
+				fd_alloc_cache_entry(fd);
 			}
-
 		}
 		fdtab[fd].updated = 0;
 		fdtab[fd].new = 0;
diff --git a/src/fd.c b/src/fd.c
index d2638d3..f3d63d9 100644
--- a/src/fd.c
+++ b/src/fd.c
@@ -123,7 +123,7 @@ void fd_delete(int fd)
 	if (cur_poller.clo)
 		cur_poller.clo(fd);
 
-	release_spec_entry(fd);
+	fd_release_cache_entry(fd);
 	fdtab[fd].state &= ~(FD_EV_CURR_MASK | FD_EV_PREV_MASK);
 
 	port_range_release_port(fdinfo[fd].port_range, fdinfo[fd].local_port);
-- 
1.8.3.2

