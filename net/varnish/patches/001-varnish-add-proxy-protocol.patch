commit 0951bdda4b59555613a2b24e5a01a9ceb4bf8e9b
Author: Emmanuel Hocdet <manu@meta-x.org>
Date:   Mon Dec 30 16:25:18 2013 +0100

    proxy protocol

diff --git a/bin/varnishd/Makefile.am b/bin/varnishd/Makefile.am
index bfeb6b9..cb9c1a2 100644
Index: varnish-3.0.5/bin/varnishd/Makefile.am
===================================================================
--- varnish-3.0.5.orig/bin/varnishd/Makefile.am
+++ varnish-3.0.5/bin/varnishd/Makefile.am
@@ -39,6 +39,7 @@ varnishd_SOURCES = \
 	cache_panic.c \
 	cache_pipe.c \
 	cache_pool.c \
+	cache_proxyconn.c \
 	cache_response.c \
 	cache_session.c \
 	cache_shmlog.c \
Index: varnish-3.0.5/bin/varnishd/cache.h
===================================================================
--- varnish-3.0.5.orig/bin/varnishd/cache.h
+++ varnish-3.0.5/bin/varnishd/cache.h
@@ -530,7 +530,9 @@ struct sess {
 
 	int			restarts;
 	int			esi_level;
-	int			disable_esi;
+	uint8_t			disable_esi;
+
+	uint8_t			do_proxy;
 
 	uint8_t			hash_ignore_busy;
 	uint8_t			hash_always_miss;
@@ -638,6 +640,9 @@ void VCA_Shutdown(void);
 const char *VCA_waiter_name(void);
 extern pthread_t VCA_thread;
 
+/* cache_proxyconn.c */
+int PRC_Complete(struct sess *sp);
+
 /* cache_backend.c */
 void VBE_UseHealth(const struct director *vdi);
 
Index: varnish-3.0.5/bin/varnishd/cache_acceptor.c
===================================================================
--- varnish-3.0.5.orig/bin/varnishd/cache_acceptor.c
+++ varnish-3.0.5/bin/varnishd/cache_acceptor.c
@@ -182,12 +182,20 @@ VCA_Prep(struct sess *sp)
 	if (params->log_local_addr) {
 		VTCP_name(sp->mysockaddr, sp->mysockaddrlen,
 		    addr, sizeof addr, port, sizeof port);
-		VSL(SLT_SessionOpen, sp->fd, "%s %s %s %s",
-		    sp->addr, sp->port, addr, port);
 	} else {
-		VSL(SLT_SessionOpen, sp->fd, "%s %s %s",
-		    sp->addr, sp->port, sp->mylsock->name);
+		strcpy(addr, "-");
+		strcpy(port, "-");
 	}
+
+	sp->do_proxy = sp->mylsock->proxy;
+	if (sp->do_proxy) {
+		VSL(SLT_SessionOpen, sp->fd, "%s %s (proxy)%s %s %s",
+		    sp->addr, sp->port, sp->mylsock->name, addr, port);
+	} else {
+		VSL(SLT_SessionOpen, sp->fd, "%s %s %s %s %s",
+		    sp->addr, sp->port, sp->mylsock->name, addr, port);
+	}
+
 	sp->acct_ses.first = sp->t_open;
 	if (need_test)
 		sock_test(sp->fd);
Index: varnish-3.0.5/bin/varnishd/cache_center.c
===================================================================
--- varnish-3.0.5.orig/bin/varnishd/cache_center.c
+++ varnish-3.0.5/bin/varnishd/cache_center.c
@@ -1486,6 +1486,15 @@ cnt_start(struct sess *sp)
 	AZ(sp->obj);
 	AZ(sp->vcl);
 
+	if (sp->do_proxy) {
+		sp->do_proxy = 0;
+		if (!PRC_Complete(sp)) {
+			sp->step = STP_DONE;
+			vca_close_session(sp, "proxy");
+			return (0);
+		}
+	}
+
 	/* Update stats of various sorts */
 	sp->wrk->stats.client_req++;
 	sp->t_req = TIM_real();
Index: varnish-3.0.5/bin/varnishd/cache_proxyconn.c
===================================================================
--- /dev/null
+++ varnish-3.0.5/bin/varnishd/cache_proxyconn.c
@@ -0,0 +1,161 @@
+/*
+ * Proxy protocol 
+ *
+ * Author: Emmanuel Hocdet <manu@meta-x.org>
+ *
+ * reference:
+ * http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt
+ *
+ * Parsing code is largely inspired from Haproxy
+ */
+
+#include "config.h"
+
+#include <netinet/in.h>
+#include <arpa/inet.h>
+
+#include "cache.h"
+ 
+static inline uint32_t 
+read_uint(const char **s, const char *end)
+{
+	const char *ptr = *s;
+	uint32_t i = 0;
+	uint32_t j, k;
+
+	while (ptr < end) {
+		j = *ptr - '0';
+		k = i * 10;
+		if (j > 9)
+			break;
+		i = k + j;
+		ptr++;
+	}
+	*s = ptr;
+	return i;
+}
+
+static inline int
+prc_split_inet(char **s, const char *end, char **psrc_s, char **pdst_s, uint32_t *sport, uint32_t *dport)
+{
+	char *p = *s;
+	char *dst_s, *sport_s, *dport_s;
+	*psrc_s = p;
+	dst_s = NULL;
+	sport_s = dport_s = NULL;
+
+	while(1) {
+		if (p > end - 2) {
+			return (1);
+		} 
+		else if (*p == '\r') {
+			*p = '\0';
+			p++;
+			if (*p++ != '\n')
+				return (1);
+			break;
+		}
+
+		if (*p == ' ') {
+			*p = 0;
+			if (!dst_s)
+				dst_s = p + 1;
+			else if (!sport_s)
+				sport_s = p + 1;
+			else if (!dport_s)
+				dport_s = p + 1;
+		}
+		p++;
+	}
+
+	if (!dst_s || !sport_s || !dport_s)
+		return (1);
+
+	*sport = read_uint((const char **)&sport_s, dport_s - 1);
+	if (*sport_s != 0)
+		return (1);
+
+	*dport = read_uint((const char **)&dport_s, p - 2);
+	if (*dport_s != 0)
+		return (1);
+
+	*pdst_s = dst_s;
+	*s = p;
+	return (0);
+}
+
+int
+PRC_Complete(struct sess *sp)
+{	
+	char *p;
+	const char *end;
+
+	p = sp->htc->rxbuf.b;
+	end = sp->htc->rxbuf.e;
+
+	if (end - p < 6)
+		return (0);
+	if (memcmp(p, "PROXY ", 6) != 0)
+		return (0);
+	p += 6;
+	if (end - p < 18) /* shortest possible line */
+		return (0);
+
+	if (memcmp(p, "TCP4 ", 5) == 0) {
+		char *src_s, *dst_s;
+		uint32_t sport, dport;
+		struct in_addr src3, dst3;
+
+		p += 5;
+
+		if (prc_split_inet(&p, end, &src_s, &dst_s, &sport, &dport))
+			return (0);
+
+		if (inet_pton(AF_INET, src_s, (void *)&src3) != 1)
+			return (0);
+
+		if (inet_pton(AF_INET, dst_s, (void *)&dst3) != 1)
+			return (0);
+
+		((struct sockaddr_in *)sp->sockaddr)->sin_family      = AF_INET;
+		memcpy(&((struct sockaddr_in *)sp->sockaddr)->sin_addr, &src3, sizeof(struct in_addr));
+		((struct sockaddr_in *)sp->sockaddr)->sin_port        = htons(sport);
+
+		((struct sockaddr_in *)sp->mysockaddr)->sin_family        = AF_INET;
+		memcpy(&((struct sockaddr_in *)sp->mysockaddr)->sin_addr, &dst3, sizeof(struct in_addr));
+		((struct sockaddr_in *)sp->mysockaddr)->sin_port          = htons(dport);
+
+	}
+	else if(memcmp(p, "TCP6 ", 5) == 0) {
+		char *src_s, *dst_s;
+		uint32_t sport, dport;
+		struct in6_addr src3, dst3;
+
+		p += 5;
+
+		if (prc_split_inet(&p, end, &src_s, &dst_s, &sport, &dport))
+			return (0);
+
+		if (inet_pton(AF_INET6, src_s, (void *)&src3) != 1)
+			return (0);
+
+		if (inet_pton(AF_INET6, dst_s, (void *)&dst3) != 1)
+			return (0);
+
+		((struct sockaddr_in6 *)sp->sockaddr)->sin6_family      = AF_INET6;
+		memcpy(&((struct sockaddr_in6 *)sp->sockaddr)->sin6_addr, &src3, sizeof(struct in6_addr));
+		((struct sockaddr_in6 *)sp->sockaddr)->sin6_port        = htons(sport);
+
+		((struct sockaddr_in6 *)sp->mysockaddr)->sin6_family        = AF_INET6;
+		memcpy(&((struct sockaddr_in6 *)sp->mysockaddr)->sin6_addr, &dst3, sizeof(struct in6_addr));
+		((struct sockaddr_in6 *)sp->mysockaddr)->sin6_port          = htons(dport);
+	} else {
+		return (0);
+	}
+	sp->htc->rxbuf.b = p;
+
+	VTCP_name(sp->sockaddr,sp->sockaddrlen,
+		  sp->addr, sizeof sp->addr, sp->port, sizeof sp->port);
+
+	return (1);
+}
Index: varnish-3.0.5/bin/varnishd/heritage.h
===================================================================
--- varnish-3.0.5.orig/bin/varnishd/heritage.h
+++ varnish-3.0.5/bin/varnishd/heritage.h
@@ -34,6 +34,7 @@
 struct listen_sock {
 	VTAILQ_ENTRY(listen_sock)	list;
 	int				sock;
+	int				proxy;
 	char				*name;
 	struct vss_addr			*addr;
 };
Index: varnish-3.0.5/bin/varnishd/mgt_param.c
===================================================================
--- varnish-3.0.5.orig/bin/varnishd/mgt_param.c
+++ varnish-3.0.5/bin/varnishd/mgt_param.c
@@ -376,7 +376,12 @@ tweak_listen_address(struct cli *cli, co
 	for (i = 1; av[i] != NULL; i++) {
 		struct vss_addr **ta;
 		int j, n;
+		int proxy = 0;
 
+		if (!strcmp("proxy", av[i]) && av[i+1] != NULL) {
+		        proxy = 1;
+			i++;
+		}
 		n = VSS_resolve(av[i], "http", &ta);
 		if (n == 0) {
 			VCLI_Out(cli, "Invalid listen address ");
@@ -387,6 +392,7 @@ tweak_listen_address(struct cli *cli, co
 		for (j = 0; j < n; ++j) {
 			ls = calloc(sizeof *ls, 1);
 			AN(ls);
+			ls->proxy = proxy;
 			ls->sock = -1;
 			ls->addr = ta[j];
 			ls->name = strdup(av[i]);
